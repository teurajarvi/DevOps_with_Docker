This exercise is mandatory

Start both frontend-example and backend-example with correct ports exposed and add ENV to Dockerfile with 
necessary information from both READMEs (front,back).

Ignore the backend configurations until frontend sends requests to <backend>/ping when you press the button.

You know that the configuration is ready when the button for 1.12 of frontend-example responds and turns green.

Do not alter the code of either project

Submit the edited Dockerfiles and commands used to run.
    The frontend will first talk to your browser. Then the code will be executed from your browser and that will 
    send a message to backend.

    TIP: When configuring web applications keep browser developer console ALWAYS open, F12 or cmd+shift+I when 
    the browser window is open. Information about configuring cross origin requests is in README of the backend project.

    TIP: Developer console has multiple views, most important ones are Console and Network. Exploring the Network 
    tab can give you a lot of information on where messages are being sent and what is received as response!
------------------------------------------------------------------------------

FRONTEND COMMANDS:

$ sudo docker build -t servit .                            
Sending build context to Docker daemon  162.3MB
Step 1/8 : FROM ubuntu:16.04
 ---> c6a43cd4801e
Step 2/8 : ENV API_URL=http://localhost:8000
 ---> Using cache
 ---> 37b244c23d7e
Step 3/8 : RUN apt-get update && apt-get install -y curl
 ---> Using cache
 ---> 4f63c8f217aa
Step 4/8 : RUN curl -sL https://deb.nodesource.com/setup_10.x | bash
 ---> Using cache
 ---> 23d2d2ade8b1
Step 5/8 : RUN apt install -y nodejs
 ---> Using cache
 ---> 9b327e376c53
Step 6/8 : EXPOSE 5000
 ---> Using cache
 ---> 81ad44bb679c
Step 7/8 : WORKDIR /mydir
 ---> Using cache
 ---> 954990f3a938
Step 8/8 : COPY ./frontend-example-docker-master .
 ---> Using cache
 ---> 53a1e6cc1725
Successfully built 53a1e6cc1725
Successfully tagged servit:latest

$ sudo docker run -it -p 5000:5000 servit sh -c 'npm start'
> frontend-example-docker@1.0.0 start /mydir
> webpack --mode production && serve -s -l 5000 dist
Hash: 3a68124c9cb9e94fb70f
Version: webpack 4.41.5
Time: 12980ms
Built at: 01/15/2020 2:19:16 PM
...
   ┌────────────────────────────────────────────────┐
   │                                                │
   │   Serving!                                     │
   │                                                │
   │   - Local:            http://localhost:5000    │
   │   - On Your Network:  http://172.17.0.2:5000   │
   │                                                │
   └────────────────────────────────────────────────┘


BACKEND COMMANDS:

$ sudo docker build -t backit .
Sending build context to Docker daemon  289.3kB
Step 1/8 : FROM ubuntu:16.04
 ---> c6a43cd4801e
Step 2/8 : ENV FRONT_URL=http://localhost:5000
 ---> Running in a76a72dafdef
Removing intermediate container a76a72dafdef
 ---> b28cb3ba0a5c
Step 3/8 : RUN apt-get update && apt-get install -y curl vim
 ---> Running in a49f6019b702
...
Removing intermediate container a49f6019b702
 ---> 69721d65e80e
Step 4/8 : RUN curl -sL https://deb.nodesource.com/setup_10.x | bash
 ---> Running in 8a4220b4ccbe
...
Removing intermediate container 8a4220b4ccbe
 ---> f5e6a926acfd
Step 5/8 : RUN apt install -y nodejs
 ---> Running in 942d455a968f
...
Removing intermediate container 942d455a968f
 ---> 51e19b49d8b4
Step 6/8 : EXPOSE 8000
 ---> Running in 881d8a6be723
Removing intermediate container 881d8a6be723
 ---> fb116522f93f
Step 7/8 : WORKDIR /mydir
 ---> Running in 6b7ebcfa0e1f
Removing intermediate container 6b7ebcfa0e1f
 ---> e8b434ccb5ba
Step 8/8 : COPY ./backend-example-docker-master .
 ---> 310fd9bdc215
Successfully built 310fd9bdc215
Successfully tagged backit:latest


$ sudo docker run -it -v $(pwd)/logs.txt:/mydir/logs.txt -p 8000:8000 backit sh -c 'npm install; npm start'
...
Started on port 8000

FRONTEND REQUEST HEADERS:

GET /ping HTTP/1.1
Host: localhost:8000
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Origin: http://localhost:5000
Connection: keep-alive
Referer: http://localhost:5000/
If-None-Match: W/"4-DlFKBmK8tp3IY5U9HOJuPUDoGoc"

RESPONSE HEADERS:
HTTP/1.1 304 Not Modified
X-Powered-By: Express
Access-Control-Allow-Origin: http://localhost:5000
Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept
ETag: W/"4-DlFKBmK8tp3IY5U9HOJuPUDoGoc"
Date: Wed, 15 Jan 2020 14:20:03 GMT
Connection: keep-alive

BROWSER:
Press to test -button goes green after clicking the button. Text is updated to "Working!"

